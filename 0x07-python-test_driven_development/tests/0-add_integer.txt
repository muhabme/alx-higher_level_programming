
===========================
How to use 0-add_integer.py
===========================

This module defines an addition function for integers ``add_integer(a, b)``.

Usage
=====

``add_integer(...)``` returns the addition of its two arguments using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(5, 4)
    9

::

    >>> add_integer(11, -4)
    7

The function also works with floating-point values.

::

    >>> add_integer(5.0, 4.0)
    9

Note that floats are casted to ints before addition is performed.

::

    >>> add_integer(4.9, 0.1)
    4

::

    >>> add_integer(-2.9, -0.9)
    -2

Floating and non-floating point values can be combined.

::

    >>> add_integer(2.6, -3)
    -1

The second argument is optional - by default, it is 98.

::

    >>> add_integer(100)
    198

Non-Numbers
===========

``add_integer()`` expects both arguments to be either integers or floats.
If an argument is a non-integer or a non-float, a TypeError is raised:

::

    >>> add_integer("hello", 1)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(1, "world")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(1.2, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", "world")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

Same with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
